/* tslint:disable */
/* eslint-disable */
/**
 * OpenLab App Service REST API
 * This is a sample OpenLab application service REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).  Do not edit the class manually.  App - a model defined in OpenAPI      appname: The appname of this App [Optional].     description: The description of this App [Optional].     version: The version of this App [Optional].     endpoints: The endpoints of this App [Optional].
 * @export
 * @interface App
 */
export interface App {
    /**
     * 
     * @type {string}
     * @memberof App
     */
    'appname'?: string;
    /**
     * 
     * @type {string}
     * @memberof App
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof App
     */
    'version'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof App
     */
    'endpoints'?: Array<string>;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).  Do not edit the class manually.  Job - a model defined in OpenAPI      appname: The appname of this Job [Optional].     inputs: The inputs of this Job [Optional].     parameters: The parameters of this Job [Optional].
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'appname': string;
    /**
     * 
     * @type {Array<object>}
     * @memberof Job
     */
    'inputs'?: Array<object>;
    /**
     * 
     * @type {object}
     * @memberof Job
     */
    'parameters'?: object;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'jobid': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'status'?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof Job
     */
    'outputs'?: Array<any>;
}
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).  Do not edit the class manually.  JobRequest - a model defined in OpenAPI      appname: The appname of this Job [Optional].     inputs: The inputs of this Job [Optional].     parameters: The parameters of this Job [Optional].
 * @export
 * @interface JobRequest
 */
export interface JobRequest {
    /**
     * 
     * @type {string}
     * @memberof JobRequest
     */
    'appname'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof JobRequest
     */
    'inputs'?: Array<object>;
    /**
     * 
     * @type {object}
     * @memberof JobRequest
     */
    'parameters'?: object;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    'loc': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * OpenLabApi - axios parameter creator
 * @export
 */
export const OpenLabApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get app information, endpoints and examples
         * @param {string} appname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppByNameV1AppsAppnameGet: async (appname: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appname' is not null or undefined
            assertParamExists('getAppByNameV1AppsAppnameGet', 'appname', appname)
            const localVarPath = `/v1/apps/{appname}`
                .replace(`{${"appname"}}`, encodeURIComponent(String(appname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get job metadata and status
         * @param {string} appname 
         * @param {string} jobid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobStatusV1AppsAppnameStatusJobidGet: async (appname: string, jobid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appname' is not null or undefined
            assertParamExists('getJobStatusV1AppsAppnameStatusJobidGet', 'appname', appname)
            // verify required parameter 'jobid' is not null or undefined
            assertParamExists('getJobStatusV1AppsAppnameStatusJobidGet', 'jobid', jobid)
            const localVarPath = `/v1/apps/{appname}/status/{jobid}`
                .replace(`{${"appname"}}`, encodeURIComponent(String(appname)))
                .replace(`{${"jobid"}}`, encodeURIComponent(String(jobid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List apps available on this service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppsV1AppsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Submit a new job for an application, receive job metadata and status
         * @param {string} appname 
         * @param {JobRequest} [jobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitJobV1AppsAppnameSubmitPost: async (appname: string, jobRequest?: JobRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appname' is not null or undefined
            assertParamExists('submitJobV1AppsAppnameSubmitPost', 'appname', appname)
            const localVarPath = `/v1/apps/{appname}/submit`
                .replace(`{${"appname"}}`, encodeURIComponent(String(appname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenLabApi - functional programming interface
 * @export
 */
export const OpenLabApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpenLabApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get app information, endpoints and examples
         * @param {string} appname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppByNameV1AppsAppnameGet(appname: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<App>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppByNameV1AppsAppnameGet(appname, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get job metadata and status
         * @param {string} appname 
         * @param {string} jobid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobStatusV1AppsAppnameStatusJobidGet(appname: string, jobid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobStatusV1AppsAppnameStatusJobidGet(appname, jobid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List apps available on this service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAppsV1AppsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<App>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAppsV1AppsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Submit a new job for an application, receive job metadata and status
         * @param {string} appname 
         * @param {JobRequest} [jobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitJobV1AppsAppnameSubmitPost(appname: string, jobRequest?: JobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitJobV1AppsAppnameSubmitPost(appname, jobRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OpenLabApi - factory interface
 * @export
 */
export const OpenLabApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpenLabApiFp(configuration)
    return {
        /**
         * 
         * @summary Get app information, endpoints and examples
         * @param {string} appname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppByNameV1AppsAppnameGet(appname: string, options?: any): AxiosPromise<App> {
            return localVarFp.getAppByNameV1AppsAppnameGet(appname, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get job metadata and status
         * @param {string} appname 
         * @param {string} jobid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobStatusV1AppsAppnameStatusJobidGet(appname: string, jobid: string, options?: any): AxiosPromise<Job> {
            return localVarFp.getJobStatusV1AppsAppnameStatusJobidGet(appname, jobid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List apps available on this service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppsV1AppsGet(options?: any): AxiosPromise<Array<App>> {
            return localVarFp.listAppsV1AppsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Submit a new job for an application, receive job metadata and status
         * @param {string} appname 
         * @param {JobRequest} [jobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitJobV1AppsAppnameSubmitPost(appname: string, jobRequest?: JobRequest, options?: any): AxiosPromise<Job> {
            return localVarFp.submitJobV1AppsAppnameSubmitPost(appname, jobRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OpenLabApi - interface
 * @export
 * @interface OpenLabApi
 */
export interface OpenLabApiInterface {
    /**
     * 
     * @summary Get app information, endpoints and examples
     * @param {string} appname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenLabApiInterface
     */
    getAppByNameV1AppsAppnameGet(appname: string, options?: AxiosRequestConfig): AxiosPromise<App>;

    /**
     * 
     * @summary Get job metadata and status
     * @param {string} appname 
     * @param {string} jobid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenLabApiInterface
     */
    getJobStatusV1AppsAppnameStatusJobidGet(appname: string, jobid: string, options?: AxiosRequestConfig): AxiosPromise<Job>;

    /**
     * 
     * @summary List apps available on this service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenLabApiInterface
     */
    listAppsV1AppsGet(options?: AxiosRequestConfig): AxiosPromise<Array<App>>;

    /**
     * 
     * @summary Submit a new job for an application, receive job metadata and status
     * @param {string} appname 
     * @param {JobRequest} [jobRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenLabApiInterface
     */
    submitJobV1AppsAppnameSubmitPost(appname: string, jobRequest?: JobRequest, options?: AxiosRequestConfig): AxiosPromise<Job>;

}

/**
 * OpenLabApi - object-oriented interface
 * @export
 * @class OpenLabApi
 * @extends {BaseAPI}
 */
export class OpenLabApi extends BaseAPI implements OpenLabApiInterface {
    /**
     * 
     * @summary Get app information, endpoints and examples
     * @param {string} appname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenLabApi
     */
    public getAppByNameV1AppsAppnameGet(appname: string, options?: AxiosRequestConfig) {
        return OpenLabApiFp(this.configuration).getAppByNameV1AppsAppnameGet(appname, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get job metadata and status
     * @param {string} appname 
     * @param {string} jobid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenLabApi
     */
    public getJobStatusV1AppsAppnameStatusJobidGet(appname: string, jobid: string, options?: AxiosRequestConfig) {
        return OpenLabApiFp(this.configuration).getJobStatusV1AppsAppnameStatusJobidGet(appname, jobid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List apps available on this service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenLabApi
     */
    public listAppsV1AppsGet(options?: AxiosRequestConfig) {
        return OpenLabApiFp(this.configuration).listAppsV1AppsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Submit a new job for an application, receive job metadata and status
     * @param {string} appname 
     * @param {JobRequest} [jobRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenLabApi
     */
    public submitJobV1AppsAppnameSubmitPost(appname: string, jobRequest?: JobRequest, options?: AxiosRequestConfig) {
        return OpenLabApiFp(this.configuration).submitJobV1AppsAppnameSubmitPost(appname, jobRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


